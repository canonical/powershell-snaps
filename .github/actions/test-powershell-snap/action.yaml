name: 'Test PowerShell Snap'
description: 'A sequence of steps to test the Canonical PowerShell Snap'

inputs:
  release:
    description: 'The PowerShell release to be tested (lts, stable, preview)'
    required: true

runs:
  using: "composite"
  steps:
    - id: validate-release
      shell: bash
      run: |
        release="${{ inputs.release }}"
        case "$release" in
          lts|stable|preview)
            echo "Valid release: $release"
            ;;
          *)
            echo "Error: Invalid release. Must be one of: lts, stable, preview."
            exit 1
            ;;
        esac
    - id: derive-snap-info
      shell: bash
      run: |
        echo "snap-path=powershell-${{ inputs.release }}" >> "$GITHUB_OUTPUT"
    - id: get-arch
      shell: bash
      run: echo "dpkg-arch=$(dpkg --print-architecture)" >> "$GITHUB_OUTPUT"
    - uses: actions/download-artifact@v4
      id: download-artifact
      with:
        name: ${{ steps.derive-snap-info.outputs.snap-path }}-${{ steps.get-arch.outputs.dpkg-arch }}
    - name: Gather filename
      id: gather-filename
      shell: bash
      env:
        ARTIFACT_PATH: ${{ steps.download-artifact.outputs.download-path }}
      run: |
        ls -la $ARTIFACT_PATH
        SNAP_FILE_NAME=$(find ${ARTIFACT_PATH} -name 'powershell*.snap')
        echo "snap-path=${SNAP_FILE_NAME}" >> "$GITHUB_OUTPUT"
    - name: Test PowerShell Snap
      id: test
      shell: bash
      env:
        SNAP_PATH: ${{ steps.gather-filename.outputs.snap-path }}
      run: |
        if [ "${{ inputs.release }}" = "preview" ]; then
          sudo add-apt-repository --yes ppa:dotnet/previews
          sudo apt install --yes dotnet10
        elif [ "${{ inputs.release }}" = "lts" ]; then
          sudo apt install --yes dotnet8
        elif [ "${{ inputs.release }}" = "stable" ]; then
          sudo add-apt-repository --yes ppa:dotnet/backports
          sudo apt install --yes dotnet9
        else
          echo "Error: Invalid release. Must be one of: lts, stable, preview."
          exit 1
        fi

        sudo snap install --dangerous --classic ${SNAP_PATH}

        POWERSHELL=$(find /snap/bin -name 'powershell*')
        LATEST_DOTNET_SDK_VERSION=$(/usr/bin/dotnet --version)

        git clone https://github.com/powershell/powershell pwsh-repo

        pushd pwsh-repo
        git checkout "v$($POWERSHELL -Command "\$PSVersionTable.PSVersion.ToString()")"
        git apply --verbose ../eng/test/*.patch

        jq '.sdk.version = "'$LATEST_DOTNET_SDK_VERSION'"' global.json > tmp.json
        mv tmp.json global.json

        echo "global.json file:"
        cat global.json

        popd

        $POWERSHELL -File ./eng/test/test-pwsh.ps1

