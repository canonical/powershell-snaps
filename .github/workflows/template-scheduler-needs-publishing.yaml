name: Check and compare Snap Store and buildinfo versions

on:
  workflow_call:
    inputs:
      release:
        required: true
        type: string
      enable-mattermost-notifications:
        required: false
        type: boolean
        default: true
    outputs:
      needs-publishing:
        value: ${{ jobs.check-versions.outputs.needs-publishing }}
    secrets:
      MATTERMOST_WEBHOOK_URL:
        required: true

jobs:
  check-versions:
    runs-on: [self-hosted, large, noble, x64]
    outputs:
      needs-publishing: ${{ steps.check.outputs.needs-publishing }}
    steps:
      - uses: actions/checkout@v4
        id: checkout
      - id: derive-snap-info
        shell: bash
        run: |
          if [ "${{ inputs.release }}" = "preview" ]; then
            SNAP_NAME=powershell-preview
            SNAP_PATH=powershell-preview
            SNAP_RELEASE_CHANNEL=latest/edge
          elif [ "${{ inputs.release }}" = "lts" ]; then
            SNAP_NAME=powershell
            SNAP_PATH=powershell-lts
            SNAP_RELEASE_CHANNEL=lts/edge
          elif [ "${{ inputs.release }}" = "stable" ]; then
            SNAP_NAME=powershell
            SNAP_PATH=powershell-stable
            SNAP_RELEASE_CHANNEL=latest/edge
          else
            echo "Error: Invalid release. Must be one of: lts, stable, preview."
            exit 1
          fi
          echo "snap-name=${SNAP_NAME}" >> "$GITHUB_OUTPUT"
          echo "snap-path=${SNAP_PATH}" >> "$GITHUB_OUTPUT"
          echo "snap-release-channel=${SNAP_RELEASE_CHANNEL}" >> "$GITHUB_OUTPUT"
      - name: Check if Snap Store has latest version
        id: check
        shell: bash
        run: |
          # Run the script and capture the output
          output_file=$(mktemp)
          if ./eng/compare-store-buildinfo-versions.py --snap-name ${{ steps.derive-snap-info.outputs.snap-name }} \
              --snap-channel ${{ steps.derive-snap-info.outputs.snap-release-channel }} \
              --buildinfo-url "$(cat "${{ steps.derive-snap-info.outputs.snap-path }}/buildinfo-url")" \
              --output-file "$output_file"; then
              echo "Needs publishing"
              echo "needs-publishing=true" >> $GITHUB_OUTPUT
              echo "emoji=:white_check_mark:" >> $GITHUB_OUTPUT
          else
              echo "Does not need publishing"
              echo "needs-publishing=false" >> $GITHUB_OUTPUT
              echo "emoji=:no_entry:" >> $GITHUB_OUTPUT
          fi
          echo "script-output=$(cat "$output_file")" >> $GITHUB_OUTPUT
      - name: Send Mattermost notification
        id: mattermost-notification
        uses: mattermost/action-mattermost-notify@master
        if: ${{ inputs.enable-mattermost-notifications }}
        with:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MATTERMOST_CHANNEL: 'powershell-notifications'
          TEXT: |
            The latest version of **${{ steps.derive-snap-info.outputs.snap-path }}** has been checked.
            ```
            ${{ steps.check.outputs.script-output }}
            ```
            Needs publishing: ${{ steps.check.outputs.emoji }}
