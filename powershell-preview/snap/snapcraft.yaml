name: powershell-preview
icon: assets/icon.png
adopt-info: powershell
summary: PowerShell for every system!
description: |
  PowerShell is an automation and configuration management platform.
  It consists of a cross-platform (Windows, Linux, and macOS) command-line shell and associated scripting language.
  See https://docs.microsoft.com/powershell/scripting/powershell-support-lifecycle for support details.

base: core22
grade: stable
confinement: classic

package-repositories:
 - type: apt
   ppa: dotnet/previews
   priority: always

architectures:
  - build-on: [amd64]
    build-for: [amd64]
  - build-on: [arm64]
    build-for: [arm64]
  - build-on: [ppc64el]
    build-for: [ppc64el]
  - build-on: [s390x]
    build-for: [s390x]

parts:
  launcher:
    plugin: dump
    source: .
    override-build: |
      craftctl default
      if [ "${CRAFT_ARCH_BUILD_FOR}" = "ppc64el" ] || [ "${CRAFT_ARCH_BUILD_FOR}" = "s390x" ]; then
        sed -i 's|@LAUNCHER@|"$SNAP/usr/lib/dotnet/dotnet" "$SNAP/opt/powershell/pwsh.dll"|' \
            ${CRAFT_PART_INSTALL}/scripts/powershell-wrapper
      else
        sed -i 's|@LAUNCHER@|"$SNAP/opt/powershell/pwsh"|' \
            ${CRAFT_PART_INSTALL}/scripts/powershell-wrapper
      fi
    organize:
      scripts/powershell-wrapper: bin/powershell-wrapper
      buildinfo-url: meta/buildinfo-url
    prime:
      - bin/powershell-wrapper
      - meta/buildinfo-url

  patches:
    plugin: dump
    source: .
    stage:
      - patches/*.patch
    prime:
      - -patches

  powershell:
    after: [launcher]
    plugin: nil
    source: https://github.com/powershell/powershell.git
    source-type: git
    build-attributes:
      - enable-patchelf
    build-packages:
      - dotnet-sdk-10.0
      - git
      - jq
      - libicu70
      - patchelf
    build-snaps:
      - powershell/latest/edge
    stage-packages:
      - libicu70
      - liblttng-ust1
      - libssl-dev
      - zlib1g

    override-build: |
      craftctl default
      /usr/bin/dotnet --info

      if [ "${CRAFT_ARCH_BUILD_FOR}" = "amd64" ]; then
        target_rid=linux-x64
        pwsh_build_runtime=linux-x64
      elif [ "${CRAFT_ARCH_BUILD_FOR}" = "arm64" ]; then
        target_rid=linux-arm64
        pwsh_build_runtime=linux-arm64
      elif [ "${CRAFT_ARCH_BUILD_FOR}" = "ppc64el" ]; then
        target_rid=linux-ppc64le
        pwsh_build_runtime=fxdependent-linux-ppc64le
      elif [ "${CRAFT_ARCH_BUILD_FOR}" = "s390x" ]; then
        target_rid=linux-s390x
        pwsh_build_runtime=fxdependent-linux-s390x
      else
        echo "Unknown architecture (${CRAFT_ARCH_BUILD_FOR})"
        exit 1
      fi

      latest_release_url=$(cat ${CRAFT_STAGE}/meta/buildinfo-url)
      latest_release_tag=$(curl --silent --location ${latest_release_url} | jq --raw-output '.ReleaseTag')
      latest_version=$(echo $latest_release_tag | sed 's/^v//')

      git checkout "$latest_release_tag"
      craftctl set version="$latest_version"

      target_framework=$(awk -F'[<>]' '/<TargetFramework>/{print $3}' PowerShell.Common.props)
      latest_dotnet_sdk_version=$(/usr/bin/dotnet --list-sdks | cut -d ' ' -f 1 | tail -n 1)
      jq '.sdk.version = "'$latest_dotnet_sdk_version'"' ${CRAFT_PART_BUILD}/global.json > tmp.json
      mv tmp.json ${CRAFT_PART_BUILD}/global.json

      if [ -d ${CRAFT_STAGE}/patches ]; then
        git apply ${CRAFT_STAGE}/patches/*.patch
      else
        echo "No patches found"
      fi

      /snap/bin/powershell -NonInteractive -Command \
        "Import-Module ${CRAFT_PART_BUILD}/build.psm1; \
         Start-PSBuild -UseNuGetOrg -Runtime ${target_rid} -Configuration Release \
          -PSOptionsPath ${CRAFT_PART_BUILD}/psoptions.json -ReleaseTag ${latest_release_tag}"

      mkdir --parents ${CRAFT_PART_INSTALL}/opt/powershell
      cp -RLp ${CRAFT_PART_BUILD}/src/powershell-unix/bin/Release/${target_framework}/${target_rid}/publish/* \
        ${CRAFT_PART_INSTALL}/opt/powershell
      cp -RLp ${CRAFT_PART_BUILD}/psoptions.json ${CRAFT_PART_INSTALL}/opt/powershell

      if [ "${CRAFT_ARCH_BUILD_FOR}" = "amd64" ] || [ "${CRAFT_ARCH_BUILD_FOR}" = "arm64" ]; then
        patchelf --force-rpath --set-rpath \
            \$ORIGIN/../../usr/lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR}:\$ORIGIN/../../lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR} \
            ${CRAFT_PART_INSTALL}/opt/powershell/pwsh
      fi

  libpsl:
    after: [powershell]
    plugin: nil
    source: https://github.com/powershell/powershell-native.git
    source-type: git
    build-attributes:
      - enable-patchelf
    build-packages:
      - cmake
    override-build: |
      if [ "${CRAFT_ARCH_BUILD_FOR}" = "ppc64el" ] || [ "${CRAFT_ARCH_BUILD_FOR}" = "s390x" ]; then
        cd src/libpsl-native
        cmake -DCMAKE_BUILD_TYPE=Release .
        make -j$(nproc)

        mkdir -p ${CRAFT_PART_INSTALL}/opt/powershell
        cp ../powershell-unix/libpsl-native.so ${CRAFT_PART_INSTALL}/opt/powershell
      fi

  prereqs:
    after: [libpsl]
    plugin: nil
    stage-packages:
      - dotnet-runtime-10.0
    override-stage: |
      if [ "${CRAFT_ARCH_BUILD_FOR}" = "ppc64el" ] || [ "${CRAFT_ARCH_BUILD_FOR}" = "s390x" ]; then
        patchelf --force-rpath --set-rpath \
            \$ORIGIN/../${CRAFT_ARCH_TRIPLET_BUILD_FOR}:\$ORIGIN/../../../lib/${CRAFT_ARCH_TRIPLET_BUILD_FOR} \
            ${CRAFT_PART_INSTALL}/usr/lib/dotnet/dotnet
      else
        rm -rf ${CRAFT_PART_INSTALL}/usr/lib/dotnet
      fi
      craftctl default


apps:
  powershell-preview:
    command: bin/powershell-wrapper
    environment:
      POWERSHELL_DISTRIBUTION_CHANNEL: PSSnap
      CLR_ICU_VERSION_OVERRIDE: 70.1
